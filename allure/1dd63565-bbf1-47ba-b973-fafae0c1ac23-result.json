{"name": "Проверка ссылок на нажатия \"Под категории\"", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: Desired Capabilities must be a dictionary", "trace": "request = <SubRequest 'get_webdriver' for <Function test_catalog_type_click>>\n\n    @pytest.fixture\n    def get_webdriver(request):\n        browser = request.config.getoption(\"--browser\")\n        executor = request.config.getoption('--executor')\n        br_version = request.config.getoption('--br_version')\n        options = Options()\n        options.page_load_strategy = 'normal'\n        caps = {\n            \"browserName\": browser,\n            \"browserVersion\": br_version,\n            \"selenoid:options\": {\n                \"enableVNC\": True,\n                \"enableVideo\": False\n            }\n        }\n>       driver = webdriver.Remote(\n            command_executor=f'http://{executor}:4444/wd/hub',\n            desired_capabilities=options,\n        )\n\ntests/conftest.py:27: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <[AttributeError(\"'WebDriver' object has no attribute 'session_id'\") raised in repr()] WebDriver object at 0x7fb69b525be0>, command_executor = 'http://192.168.1.230:4444/wd/hub'\ndesired_capabilities = <selenium.webdriver.chrome.options.Options object at 0x7fb69b525070>, browser_profile = None, proxy = None, keep_alive = True, file_detector = None, options = None\n\n    def __init__(self, command_executor='http://127.0.0.1:4444',\n                 desired_capabilities=None, browser_profile=None, proxy=None,\n                 keep_alive=True, file_detector=None, options: Union[BaseOptions, List[BaseOptions]] = None):\n        \"\"\"\n        Create a new driver that will issue commands using the wire protocol.\n    \n        :Args:\n         - command_executor - Either a string representing URL of the remote server or a custom\n             remote_connection.RemoteConnection object. Defaults to 'http://127.0.0.1:4444/wd/hub'.\n         - desired_capabilities - A dictionary of capabilities to request when\n             starting the browser session. Required parameter.\n         - browser_profile - A selenium.webdriver.firefox.firefox_profile.FirefoxProfile object.\n             Only used if Firefox is requested. Optional.\n         - proxy - A selenium.webdriver.common.proxy.Proxy object. The browser session will\n             be started with given proxy settings, if possible. Optional.\n         - keep_alive - Whether to configure remote_connection.RemoteConnection to use\n             HTTP keep-alive. Defaults to True.\n         - file_detector - Pass custom file detector object during instantiation. If None,\n             then default LocalFileDetector() will be used.\n         - options - instance of a driver options.Options class\n        \"\"\"\n        if desired_capabilities:\n            warnings.warn(\n                \"desired_capabilities has been deprecated, please pass in an Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        if browser_profile:\n            warnings.warn(\n                \"browser_profile has been deprecated, please pass in an Firefox Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        if proxy:\n            warnings.warn(\n                \"proxy has been deprecated, please pass in an Options object with options kwarg\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        if not keep_alive:\n            warnings.warn(\n                \"keep_alive has been deprecated. We will be using True as the default value as we start removing it.\",\n                DeprecationWarning,\n                stacklevel=2\n            )\n        capabilities = {}\n        # If we get a list we can assume that no capabilities\n        # have been passed in\n        if isinstance(options, list):\n            capabilities = create_matches(options)\n        else:\n            _ignore_local_proxy = False\n            if options:\n                capabilities = options.to_capabilities()\n                _ignore_local_proxy = options._ignore_local_proxy\n            if desired_capabilities:\n                if not isinstance(desired_capabilities, dict):\n>                   raise WebDriverException(\"Desired Capabilities must be a dictionary\")\nE                   selenium.common.exceptions.WebDriverException: Message: Desired Capabilities must be a dictionary\n\nvenv/lib/python3.8/site-packages/selenium/webdriver/remote/webdriver.py:252: WebDriverException"}, "start": 1665175804534, "stop": 1665175804534, "uuid": "3411e3b8-ac92-48ed-a70d-cabb436bc21a", "historyId": "066369e1ae42846343b2e95e4ff9a2a5", "testCaseId": "15decde5be24363836a19bfc92a37665", "fullName": "tests.test_homepage.TestHomePage#test_catalog_type_click", "labels": [{"name": "tag", "value": "catalog_type_click"}, {"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_homepage"}, {"name": "subSuite", "value": "TestHomePage"}, {"name": "host", "value": "adanov-HP-Laptop-15-db1xxx"}, {"name": "thread", "value": "61206-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_homepage"}]}